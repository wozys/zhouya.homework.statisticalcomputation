library(zhouyahomework1)
roxygen2::roxygenise()
?CoordinateDescent
?CoordinateDescent
library(zhouyahomework1)
roxygen2::roxygenise()
roxygen2::roxygenize()
?CoordinateDescent
?ProximalOperator
# Generate Data
n = 100
p = 500
sigma_noise = 0.5
beta = rep(0, p)
beta[1:6] = c(5,10,3,80,90,10)
XData = matrix(rnorm(n*p,sd=10), nrow = n, ncol=p)
X=XData
for (i in 1:500){
X[,i]=((X[,i]-sum(X[,i])/n))/((var(X[,i])*99/100)^0.5)
}
YData = X %*% beta + rnorm(n, sd = sigma_noise)
YData=YData-sum(YData)/100
XData=X
system.time(CoordinateDescent(XData,YData,1))
system.time(ProximalOperator(XData,YData,1))
system.time(ProximalOperator(XData,YData,1))
system.time(CoordinateDescent(XData,YData,1))
CoordinateDescent(XData,YData,1)
cat("the L2 loss for Coordinate Descent and Proximal Operator are  :",L2Loss1,L2Loss2)
cat("the True Negative Rate for \n Coordinate Descent and Proxima",1)
f11=f1[1:ite1]
f22=f2[1:ite2]
library(zhouyahomework1)
# Coordinate Descent for LASSO
betaHat1list = CoordinateDescent(XData,YData,1)
betaHat1=unlist(betaHat1list["betahat"])
diff1 = betaHat1 - beta
# L2 loss
L2Loss1 = sqrt(sum(diff1^2))
# True Positive Rate
TP1 = sum(abs(beta)>0 & abs(betaHat1)>0) / sum(abs(beta)>0)
# True Negative Rate
TN1 = sum(abs(beta)==0 & abs(betaHat1)==0) / sum(abs(beta)==0)
# Numbers of Iteration
ite1=unlist(betaHat1list["iteration"])
# Values of Objective Function
f1=unlist(betaHat1["object funtion"])
# Proximal Operator for LASSO
betaHat2list=ProximalOperator(XData, YData, 1)
betaHat2 = unlist(betaHat2list["betahat"])
diff2 = betaHat2 - beta
# L2 loss
L2Loss2 = sqrt(sum(diff2^2))
# True Positive Rate
TP2 = sum(abs(beta)>0 & abs(betaHat2)>0) / sum(abs(beta)>0)
# True Negative Rate
TN2 = sum(abs(beta)==0 & abs(betaHat2)==0) / sum(abs(beta)==0)
# Numbers of Iteration
ite2=unlist(betaHat2list["iteration"])
# Values of Objective Function
f2=unlist(betaHat2["object funtion"])
f11=f1[1:ite1]
f22=f2[1:ite2]
f11
f22
f1
f1=unlist(betaHat1list["object funtion"])
f2=unlist(betaHat2list["object funtion"])
f11=f1[1:ite1]
f22=f2[1:ite2]
f11
f22
f1
betaHat1
betaHat1list
betaHat1list["iteration"]
betaHat1list["object function"]
f1=unlist(betaHat1list["object function"])
f2=unlist(betaHat2list["object function"])
f1
f11=f1[1:ite1]
f22=f2[1:ite2]
f11
f22
plot(f11,1:ite1)
lines(f22,1:ite2)
plot(1:ite1,f11)
lines(1:ite2,f22)
plot(1:ite2,f22)
lines(1:ite1,f11)
plot(1:ite2,f22,x,x)
plot(1:ite2,f22,"x","x")
?plot
plot(1:ite2,f22,xlab=dsd)
plot(1:ite2,f22,xlab="dsd")
plot(1:ite2,f22,xlab=iteration,ylab=f)
plot(1:ite2,f22,xlab=iteration,ylab="values of f")
plot(1:ite2,f22,xlab="iteration",ylab="values of f")
plot(1:ite2,f22,xlab="iteration",ylab="object function")
?plot
plot(1:ite2,f22,xlab="iteration",ylab="object function",type=l)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="l")
lines(1:ite1,f11)
?plot
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="l",sub="ds")
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="l",sub="ds")
?plot
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="l",sub="ds"，red=blue)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="l",sub="ds"，red=blue)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="l",sub="ds")
?plot
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s")
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=red)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col3)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=3)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=2)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=1)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=5)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=3)
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=2)
lines(1:ite1,f11,col=1)
lines(1:ite1,f11,col=3)
lines(1:ite1,f11,col=4)
lines(1:ite1,f11,colname=2)
?plot
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=2,sub="the red line is for Proximal Operator while the black is for Coordinate Descent")
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=2,sub="the red line is for Proximal Operator while the black is for Coordinate Descent")
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=2,sub="the red line is for Proximal Operator while the black is for Coordinate Descent")
lines(1:ite1,f11,col=1)
devtools::install_github("hadley/pkgdown")
setwd("~/Desktop/r语言资料/Rcode/zhouyahomework1")
devtools::use_testthat()
devtools::use_testthat()
library(zhouyahomework1)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::use_vignette("my-vignette")
pkgdown::build_site()
git
# log 10 Values of Objective Funcion
f11=log10(f1[1:ite1])
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=2)
n = 100
p = 500
sigma_noise = 0.5
beta = rep(0, p)
beta[1:6] = c(5,10,3,80,90,10)
XData = matrix(rnorm(n*p,sd=10), nrow = n, ncol=p)
X=XData
for (i in 1:500){
X[,i]=((X[,i]-sum(X[,i])/n))/((var(X[,i])*99/100)^0.5)
}
YData = X %*% beta + rnorm(n, sd = sigma_noise)
YData=YData-sum(YData)/100
XData=X
library(zhouyahomework1)
# Coordinate Descent for LASSO
betaHat1list = CoordinateDescent(XData,YData,1)
betaHat1=unlist(betaHat1list["betahat"])
diff1 = betaHat1 - beta
# L2 loss
L2Loss1 = sqrt(sum(diff1^2))
# True Positive Rate
TP1 = sum(abs(beta)>0 & abs(betaHat1)>0) / sum(abs(beta)>0)
# True Negative Rate
TN1 = sum(abs(beta)==0 & abs(betaHat1)==0) / sum(abs(beta)==0)
# Numbers of Iteration
ite1=unlist(betaHat1list["iteration"])
# Values of Objective Function
f1=unlist(betaHat1list["object function"])
library(zhouyahomework1)
# Proximal Operator for LASSO
betaHat2list=ProximalOperator(XData, YData, 1)
betaHat2 = unlist(betaHat2list["betahat"])
diff2 = betaHat2 - beta
# L2 loss
L2Loss2 = sqrt(sum(diff2^2))
# True Positive Rate
TP2 = sum(abs(beta)>0 & abs(betaHat2)>0) / sum(abs(beta)>0)
# True Negative Rate
TN2 = sum(abs(beta)==0 & abs(betaHat2)==0) / sum(abs(beta)==0)
# Numbers of Iteration
ite2=unlist(betaHat2list["iteration"])
# Values of Objective Function
f2=unlist(betaHat2list["object function"])
cat("the L2 loss for Coordinate Descentand Proximal Operator
are:",L2Loss1,L2Loss2)
cat("the True Positive Rate for Coordinate Descent and Proximal
Operator are:",TP1,TP2)
cat("the True Negative Rate for Coordinate Descent and Proximal
Operator are:",TN1,TN2)
cat("the numbers of iteration for Coordinate Descent and Proximal
Operator are:",ite1,ite2)
system.time(CoordinateDescent(XData,YData,1))
system.time(ProximalOperator(XData, YData, 1))
# log 10 Values of Objective Funcion
f11=log10(f1[1:ite1])
f22=log10(f2[1:ite2])
plot(1:ite2,f22,xlab="iteration",ylab="object function",type="s",col=2)
lines(1:ite1,f11,col=1)
legend("topright",inset=0.05,c("Coordinate Descent","ProximalOperator"),lty=c(1,1),col=c("red","black"))
Rcpp::sourceCpp('src/ProximalOperator.cpp')
library(zhouyahomework1)
library(zhouyahomework1)
source('~/Desktop/r语言资料/Rcode/normalization_in_R.R')
source('~/Desktop/r语言资料/Rcode/normalization_in_R.R')
source('~/Desktop/r语言资料/Rcode/normalization_in_R.R')
source('~/Desktop/r语言资料/Rcode/normalization_in_R.R')
setwd("~/Desktop/r语言资料/Rcode/zhouya.homework.statisticalcomputation")
setwd("~/Desktop/r语言资料/Rcode/zhouya.homework.statisticalcomputation")
